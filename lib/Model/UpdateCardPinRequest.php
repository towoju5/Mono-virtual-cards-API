<?php
/**
 * UpdateCardPinRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Towoju5\MonoCards
 * @author   Emmanuel A Towoju
 * @link     https://towoju.com.ng
 */

/**
 * Zeenah Virtual Card
 *
 * No description provided (generated by Swagger Codegen https://towoju.com.ng)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://towoju.com.ng.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://towoju.com.ng
 * Do not edit the class manually.
 */

namespace Towoju5\MonoCards\Model;

use \ArrayAccess;
use \Towoju5\MonoCards\ObjectSerializer;

/**
 * UpdateCardPinRequest Class Doc Comment
 *
 * @category Class
 * @package  Towoju5\MonoCards
 * @author   Emmanuel A Towoju
 * @link     https://towoju.com.ng
 */
class UpdateCardPinRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateCardPinRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'old_pin' => '',
'new_pin' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'old_pin' => null,
'new_pin' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'old_pin' => 'old_pin',
'new_pin' => 'new_pin'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'old_pin' => 'setOldPin',
'new_pin' => 'setNewPin'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'old_pin' => 'getOldPin',
'new_pin' => 'getNewPin'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['old_pin'] = isset($data['old_pin']) ? $data['old_pin'] : null;
        $this->container['new_pin'] = isset($data['new_pin']) ? $data['new_pin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['old_pin'] === null) {
            $invalidProperties[] = "'old_pin' can't be null";
        }
        if ($this->container['new_pin'] === null) {
            $invalidProperties[] = "'new_pin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets old_pin
     *
     * @return 
     */
    public function getOldPin()
    {
        return $this->container['old_pin'];
    }

    /**
     * Sets old_pin
     *
     * @param  $old_pin old_pin
     *
     * @return $this
     */
    public function setOldPin($old_pin)
    {
        $this->container['old_pin'] = $old_pin;

        return $this;
    }

    /**
     * Gets new_pin
     *
     * @return 
     */
    public function getNewPin()
    {
        return $this->container['new_pin'];
    }

    /**
     * Sets new_pin
     *
     * @param  $new_pin new_pin
     *
     * @return $this
     */
    public function setNewPin($new_pin)
    {
        $this->container['new_pin'] = $new_pin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
